<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Lucky Shot</title>
  <style>
    body {
      font-family: sans-serif; /* Uma fonte mais leg√≠vel para UI */
      background-color: #2c2c2c;
      color: #f0f0f0;
      text-align: center;
      padding: 20px;
    }
    h1, h2 {
      font-family: 'Press Start 2P', cursive; /* Fonte pixelada para t√≠tulos */
      color: #ffc0cb;
    }
    /* Importa a fonte do Google Fonts */
    @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

    #gun-canvas {
      width: 256px; /* Tamanho de exibi√ß√£o maior */
      height: 256px;
      image-rendering: pixelated; /* Garante que os pixels fiquem n√≠tidos */
      cursor: pointer;
      margin: 20px auto;
      display: block;
      border: 4px solid #111;
      border-radius: 8px;
      background-color: #444;
    }
    #stats {
      margin-bottom: 20px;
      background-color: #3a3a3a;
      padding: 10px;
      border-radius: 8px;
      display: inline-block;
    }
    .btn, .upgrade, .skin-item {
      background: #555;
      border: 2px solid #111;
      padding: 10px 15px;
      margin: 10px;
      border-radius: 8px;
      cursor: pointer;
      display: inline-block;
      transition: background-color 0.2s, transform 0.2s;
      font-family: 'Press Start 2P', cursive;
      color: #f0f0f0;
      font-size: 12px;
    }
    .btn:hover, .upgrade:hover, .skin-item:hover {
        background-color: #666;
        transform: translateY(-2px);
    }

    /* Estilos para o Modal do Invent√°rio */
    .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.8);
    }
    .modal-content {
      background-color: #2c2c2c;
      margin: 10% auto;
      padding: 20px;
      border: 2px solid #111;
      width: 90%;
      max-width: 700px;
      border-radius: 8px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.5);
    }
    .close-button {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    #inventory {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin-top: 20px;
    }
    .skin-item img {
      width: 64px;
      height: 64px;
      image-rendering: pixelated;
      display: block;
      margin: 0 auto 10px;
      border: 2px solid #111;
      border-radius: 4px;
      background-color: #444;
    }
    .skin-item span {
        font-size: 10px;
    }
  </style>
</head>
<body>
  <h1>üî´ Lucky Shot</h1>

  <div id="stats">
    <p>Dinheiro: R$<span id="money">100</span></p>
    <p>Aposta: R$<span id="bet">1</span></p>
    <p>Chance de perder: <span id="chance">20</span>%</p>
    <p>Multiplicador: x<span id="multiplier">1</span></p>
  </div>

  <!-- Canvas para a arma -->
  <canvas id="gun-canvas" width="128" height="128"></canvas>

  <h2>Upgrades</h2>
  <div id="upgrades"></div>

  <hr style="border-color: #444; margin: 20px auto; width: 50%;">

  <!-- Bot√µes de A√ß√£o -->
  <div>
    <button class="btn" onclick="openInventory()">Invent√°rio</button>
    <button class="btn" onclick="resetGame()">Resetar Jogo</button>
  </div>

  <!-- Modal do Invent√°rio -->
  <div id="inventory-modal" class="modal">
    <div class="modal-content">
      <span class="close-button" onclick="closeInventory()">&times;</span>
      <h2>Invent√°rio de Skins</h2>
      <div id="inventory"></div>
    </div>
  </div>


  <script>
    // Vari√°veis do Jogo
    let player_money = 100;
    let current_bet = 1;
    let winnings_multiplier = 1;
    let passive_income_per_second = 0;
    let chance_of_losing_percentage = 20;

    // Vari√°veis das Skins
    let ownedSkins = ["base"];
    // CORRIGIDO: Caminho para a imagem restaurado
    let equippedSkinSrc = "assets/skins/common_blue.jpg"; 

    // Vari√°veis do Canvas
    const canvas = document.getElementById('gun-canvas');
    const ctx = canvas.getContext('2d');
    ctx.imageSmoothingEnabled = false; // Essencial para pixel art!

    // Armazena as imagens pr√©-carregadas
    const skinImages = {};

    const skins = [
      // CORRIGIDO: Restaurado 'assets/skins/' para todos os caminhos
      { id: "base", name: "Rev√≥lver Padr√£o", rarity: "comum", src: "assets/skins/common_blue.jpg" },
      { id: "common_green", name: "Cabo Verde", rarity: "comum", src: "assets/skins/common_green.jpg" },
      { id: "uncommon_gold", name: "Dourado Gasto", rarity: "incomum", src: "assets/skins/uncommon_gold.jpg" },
      { id: "uncommon_rusted", name: "Enferrujado", rarity: "incomum", src: "assets/skins/uncommon_rusted.jpg" },
      { id: "rare_camo", name: "Camuflado", rarity: "rara", src: "assets/skins/rare_camo.jpg" },
      { id: "rare_cyber", name: "Cyberpunk", rarity: "rara", src: "assets/skins/rare_cyber.jpg" },
      { id: "epic_ice", name: "G√©lido", rarity: "√©pica", src: "assets/skins/epic_ice.jpg" },
      { id: "epic_lava", name: "Magma", rarity: "√©pica", src: "assets/skins/epic_lava.jpg" },
      { id: "mythic_banana", name: "Banana de NFT", rarity: "m√≠tica", src: "assets/skins/mythic_banana.jpg" },
      { id: "secret_alien", name: "Tecnologia Alien", rarity: "secreta", src: "assets/skins/secret_alien.jpg" }
    ];

    const upgrades = [
      { id: 1, name: "Aposta +1", cost: 20, description: "Aumenta aposta +1", type: "bet", value: 1, bought: 0, max: 10 },
      { id: 2, name: "Renda +1", cost: 50, description: "+1 renda passiva", type: "passive", value: 1, bought: 0, max: 10, requires: 1 },
      { id: 3, name: "Sorte -5%", cost: 200, description: "Reduz chance de perder -5%", type: "risk", value: -5, bought: 0, max: 5, requires: 2 }
    ];

    // --- Fun√ß√µes do Canvas ---
    function preloadSkins(callback) {
        let loadedCount = 0;
        const totalSkins = skins.length;
        skins.forEach(skin => {
            const img = new Image();
            img.src = skin.src;
            img.onload = () => {
                loadedCount++;
                skinImages[skin.src] = img; // Armazena a imagem carregada
                if (loadedCount === totalSkins) {
                    callback(); // Roda o callback quando todas as imagens carregarem
                }
            };
            // Adiciona um fallback caso a imagem n√£o carregue
            img.onerror = () => {
                loadedCount++;
                console.error(`Falha ao carregar a skin: ${skin.src}`);
                if (loadedCount === totalSkins) {
                    callback();
                }
            };
        });
    }

    function drawEquippedSkin() {
        const img = skinImages[equippedSkinSrc];
        if (img) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        } else {
            console.log("A imagem da skin ainda n√£o foi carregada.");
        }
    }


    // --- Fun√ß√µes do Jogo ---

    function renderUpgrades() {
      const upgradesDiv = document.getElementById("upgrades");
      upgradesDiv.innerHTML = "";
      upgrades.forEach(up => {
        if (up.requires && upgrades.find(u => u.id === up.requires).bought < 1) {
          return;
        }
        const btn = document.createElement("div");
        btn.className = "upgrade";
        btn.innerHTML = `${up.name} <br> R$${up.cost}`;
        btn.onclick = () => buyUpgrade(up);
        upgradesDiv.appendChild(btn);
      });
    }

    function renderInventory() {
      const inv = document.getElementById("inventory");
      inv.innerHTML = "";
      ownedSkins.forEach(skinId => {
        const skinData = skins.find(s => s.id === skinId);
        if (!skinData) return;

        const div = document.createElement("div");
        div.className = "skin-item";
        // Usa a imagem pr√©-carregada para o invent√°rio tamb√©m
        div.innerHTML = `<img src="${skinData.src}" alt="${skinData.name}"/><span>${skinData.name}</span>`;
        div.onclick = () => equipSkin(skinData.src);
        inv.appendChild(div);
      });
    }
    
    function openInventory() {
        document.getElementById("inventory-modal").style.display = "block";
    }
    function closeInventory() {
        document.getElementById("inventory-modal").style.display = "none";
    }

    function equipSkin(src) {
      equippedSkinSrc = src;
      drawEquippedSkin(); // Redesenha o canvas com a nova skin
      saveGame();
      closeInventory();
    }

    function buyUpgrade(upgrade) {
      if (player_money >= upgrade.cost) {
        player_money -= upgrade.cost;
        upgrade.bought++;
        if (upgrade.type === "bet") current_bet += upgrade.value;
        if (upgrade.type === "passive") passive_income_per_second += upgrade.value;
        if (upgrade.type === "risk") chance_of_losing_percentage = Math.max(0, chance_of_losing_percentage + upgrade.value);
        upgrade.cost = Math.floor(upgrade.cost * 1.5);
        updateUI();
        renderUpgrades();
        saveGame();
      }
    }

    function updateUI() {
      document.getElementById("money").innerText = player_money.toFixed(0);
      document.getElementById("bet").innerText = current_bet;
      document.getElementById("chance").innerText = chance_of_losing_percentage;
      document.getElementById("multiplier").innerText = winnings_multiplier;
    }

    function saveGame() {
      localStorage.setItem("luckyshot_save", JSON.stringify({
        player_money, current_bet, winnings_multiplier, passive_income_per_second, chance_of_losing_percentage, upgrades, equippedSkinSrc, ownedSkins
      }));
    }

    function loadGame() {
      const save = JSON.parse(localStorage.getItem("luckyshot_save"));
      if (save) {
        player_money = save.player_money;
        current_bet = save.current_bet;
        winnings_multiplier = save.winnings_multiplier;
        passive_income_per_second = save.passive_income_per_second;
        chance_of_losing_percentage = save.chance_of_losing_percentage;
        
        // L√≥gica de fallback melhorada para a skin base
        const baseSkin = skins.find(s => s.id === 'base');
        const baseSkinSrc = baseSkin ? baseSkin.src : ''; // Pega o src da skin 'base'
        equippedSkinSrc = save.equippedSkinSrc || baseSkinSrc;
        
        ownedSkins = save.ownedSkins || ["base"];
        if (save.upgrades) {
          save.upgrades.forEach((savedUpgrade, index) => {
              if(upgrades[index]) {
                  upgrades[index].bought = savedUpgrade.bought;
                  upgrades[index].cost = savedUpgrade.cost;
              }
          });
        }
      }
    }

    function resetGame() {
      if (confirm("Tem certeza? Todo o seu progresso ser√° perdido.")) {
        localStorage.removeItem("luckyshot_save");
        location.reload();
      }
    }
    
    function grantRandomSkin() {
        const unownedSkins = skins.filter(s => !ownedSkins.includes(s.id) && s.id !== 'base');
        if (unownedSkins.length > 0) {
            const randomSkin = unownedSkins[Math.floor(Math.random() * unownedSkins.length)];
            ownedSkins.push(randomSkin.id);
            alert(`Voc√™ desbloqueou uma nova skin: ${randomSkin.name}!`);
            renderInventory();
            saveGame();
        }
    }
    
    function startGame() {
        loadGame();
        updateUI();
        renderUpgrades();
        renderInventory();
        drawEquippedSkin(); // Desenha a skin inicial no canvas

        setInterval(() => {
          player_money += passive_income_per_second;
          updateUI();
          // N√£o precisa salvar a cada segundo aqui, salvamos em a√ß√µes importantes
        }, 1000);

        setInterval(grantRandomSkin, 20000);

        // Salva o jogo a cada 10 segundos para n√£o perder o progresso passivo
        setInterval(saveGame, 10000);
    }
    
    // --- Inicializa√ß√£o ---
    // Espera todas as imagens carregarem antes de iniciar o jogo
    window.onload = () => {
        preloadSkins(startGame);
    };

  </script>
</body>
</html>

