<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Lucky Shot</title>
  <style>
    body {
      font-family: sans-serif;
      background-color: #2c2c2c;
      color: #f0f0f0;
      text-align: center;
      padding: 20px;
    }
    h1, h2 {
      font-family: 'Press Start 2P', cursive;
      color: #ffc0cb;
    }
    @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

    #gun-canvas {
      width: 256px;
      height: 256px;
      image-rendering: pixelated;
      cursor: pointer;
      margin: 20px auto;
      display: block;
      border: 4px solid #111;
      border-radius: 8px;
      background-color: #444;
    }

    #stats {
      margin-bottom: 20px;
      background-color: #3a3a3a;
      padding: 10px;
      border-radius: 8px;
      display: inline-block;
    }

    .btn, .upgrade, .skin-item {
      background: #555;
      border: 2px solid #111;
      padding: 10px 15px;
      margin: 10px;
      border-radius: 8px;
      cursor: pointer;
      display: inline-block;
      transition: background-color 0.2s, transform 0.2s;
      font-family: 'Press Start 2P', cursive;
      color: #f0f0f0;
      font-size: 12px;
    }

    .btn:hover, .upgrade:hover, .skin-item:hover {
      background-color: #666;
      transform: translateY(-2px);
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.8);
    }

    .modal-content {
      background-color: #2c2c2c;
      margin: 10% auto;
      padding: 20px;
      border: 2px solid #111;
      width: 90%;
      max-width: 700px;
      border-radius: 8px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.5);
    }

    .close-button {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }

    #inventory {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin-top: 20px;
    }

    .skin-item img {
      width: 64px;
      height: 64px;
      image-rendering: pixelated;
      display: block;
      margin: 0 auto 10px;
      border: 2px solid #111;
      border-radius: 4px;
      background-color: #444;
    }

    .skin-item span {
      font-size: 10px;
    }
  </style>
</head>
<body>
  <h1>ðŸ”« Lucky Shot</h1>

  <div id="stats">
    <p>Dinheiro: R$<span id="money">100</span></p>
    <p>Aposta: R$<span id="bet">1</span></p>
    <p>Chance de perder: <span id="chance">20</span>%</p>
    <p>Multiplicador: x<span id="multiplier">1</span></p>
  </div>

  <canvas id="gun-canvas" width="128" height="128"></canvas>

  <h2>Upgrades</h2>
  <div id="upgrades"></div>

  <hr style="border-color: #444; margin: 20px auto; width: 50%;">

  <div>
    <button class="btn" onclick="openInventory()">InventÃ¡rio</button>
    <button class="btn" onclick="resetGame()">Resetar Jogo</button>
  </div>

  <div id="inventory-modal" class="modal">
    <div class="modal-content">
      <span class="close-button" onclick="closeInventory()">&times;</span>
      <h2>InventÃ¡rio de Skins</h2>
      <div id="inventory"></div>
    </div>
  </div>

  <script>
    let player_money = 100;
    let current_bet = 1;
    let winnings_multiplier = 1;
    let passive_income_per_second = 0;
    let chance_of_losing_percentage = 20;

    let ownedSkins = ["base"];
    let equippedSkinSrc = "./assets/skins/skin1.png"; 

    const canvas = document.getElementById('gun-canvas');
    const ctx = canvas.getContext('2d');
    ctx.imageSmoothingEnabled = false;

    const skinImages = {};

    const skins = [
      { id: "base", name: "RevÃ³lver PadrÃ£o", rarity: "comum", src: "./assets/skins/skin1.png" },
      { id: "common_green", name: "Cabo Verde", rarity: "comum", src: "./assets/skins/skin2.png" },
      { id: "common_blue", name: "Cabo Azul", rarity: "comum", src: "./assets/skins/skinblue.png" },
      { id: "uncommon_gold", name: "Dourado Gasto", rarity: "incomum", src: "./assets/skins/skin3.png" },
      { id: "uncommon_rusted", name: "Enferrujado", rarity: "incomum", src: "./assets/skins/skin4.png" },
      { id: "rare_cyber", name: "Cyberpunk", rarity: "rara", src: "./assets/skins/skin5.png" },
      { id: "rare_camo", name: "Camuflado", rarity: "rara", src: "./assets/skins/skin6.png" },
      { id: "epic_ice", name: "GÃ©lido", rarity: "Ã©pica", src: "./assets/skins/skin7.png" },
      { id: "epic_lava", name: "Magma", rarity: "Ã©pica", src: "./assets/skins/skin8.png" },
      { id: "legendary_pixel", name: "Pixel Dourado", rarity: "lendÃ¡ria", src: "./assets/skins/skin9.png" },
      { id: "mythic_banana", name: "Banana de NFT", rarity: "mÃ­tica", src: "./assets/skins/skin10.png" },
      { id: "secret_alien", name: "Tecnologia Alien", rarity: "secreta", src: "./assets/skins/skin11.png" }
    ];

    const upgrades = [
      { id: 1, name: "Aposta +1", cost: 20, type: "bet", value: 1, bought: 0, max: 10 },
      { id: 2, name: "Renda +1", cost: 50, type: "passive", value: 1, bought: 0, max: 10, requires: 1 },
      { id: 3, name: "Sorte -5%", cost: 200, type: "risk", value: -5, bought: 0, max: 5, requires: 2 }
    ];

    function preloadSkins(callback) {
      let loadedCount = 0;
      const totalSkins = skins.length;
      skins.forEach(skin => {
        const img = new Image();
        img.src = skin.src;
        img.onload = () => { loadedCount++; skinImages[skin.src] = img; if (loadedCount === totalSkins) callback(); };
        img.onerror = () => { loadedCount++; console.error(`Falha ao carregar a skin: ${skin.src}`); if (loadedCount === totalSkins) callback(); };
      });
    }

    function drawEquippedSkin() {
      const img = skinImages[equippedSkinSrc];
      if (img) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
      } else {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = "#444"; ctx.fillRect(0,0,canvas.width,canvas.height);
      }
    }

    function renderUpgrades() {
      const upgradesDiv = document.getElementById("upgrades");
      upgradesDiv.innerHTML = "";
      upgrades.forEach(up => {
        if (up.requires && upgrades.find(u => u.id === up.requires).bought < 1) return;
        const btn = document.createElement("div");
        btn.className = "upgrade";
        btn.innerHTML = `${up.name} <br> R$${up.cost}`;
        btn.onclick = () => buyUpgrade(up);
        upgradesDiv.appendChild(btn);
      });
    }

    function renderInventory() {
      const inv = document.getElementById("inventory");
      inv.innerHTML = "";
      ownedSkins.forEach(skinId => {
        const skinData = skins.find(s => s.id === skinId);
        if (!skinData) return;
        const div = document.createElement("div");
        div.className = "skin-item";
        div.innerHTML = `<img src="${skinData.src}" alt="${skinData.name}"/><span>${skinData.name}</span>`;
        div.onclick = () => equipSkin(skinData.src);
        inv.appendChild(div);
      });
    }

    function openInventory(){ document.getElementById("inventory-modal").style.display="block"; }
    function closeInventory(){ document.getElementById("inventory-modal").style.display="none"; }

    function equipSkin(src){ equippedSkinSrc=src; drawEquippedSkin(); saveGame(); closeInventory(); }

    function buyUpgrade(upgrade){
      if(player_money>=upgrade.cost){
        player_money-=upgrade.cost; upgrade.bought++;
        if(upgrade.type==="bet") current_bet+=upgrade.value;
        if(upgrade.type==="passive") passive_income_per_second+=upgrade.value;
        if(upgrade.type==="risk") chance_of_losing_percentage=Math.max(0,chance_of_losing_percentage+upgrade.value);
        upgrade.cost=Math.floor(upgrade.cost*1.5); updateUI(); renderUpgrades(); saveGame();
      }
    }

    function updateUI(){
      document.getElementById("money").innerText=player_money.toFixed(0);
      document.getElementById("bet").innerText=current_bet;
      document.getElementById("chance").innerText=chance_of_losing_percentage;
      document.getElementById("multiplier").innerText=winnings_multiplier;
    }

    function saveGame(){
      localStorage.setItem("luckyshot_save", JSON.stringify({
        player_money, current_bet, winnings_multiplier, passive_income_per_second, chance_of_losing_percentage, upgrades, equippedSkinSrc, ownedSkins
      }));
    }

    function loadGame(){
      const save=JSON.parse(localStorage.getItem("luckyshot_save"));
      if(save){
        player_money=save.player_money;
        current_bet=save.current_bet;
        winnings_multiplier=save.winnings_multiplier;
        passive_income_per_second=save.passive_income_per_second;
        chance_of_losing_percentage=save.chance_of_losing_percentage;
        const baseSkin = skins.find(s=>s.id==='base'); equippedSkinSrc=save.equippedSkinSrc||baseSkin.src;
        ownedSkins=save.ownedSkins||["base"];
        if(save.upgrades){
          save.upgrades.forEach((su,i)=>{if(upgrades[i]){upgrades[i].bought=su.bought; upgrades[i].cost=su.cost;}});
        }
      }
    }

    function resetGame(){ if(confirm("Tem certeza? Todo o seu progresso serÃ¡ perdido.")){ localStorage.removeItem("luckyshot_save"); location.reload(); } }

    function grantRandomSkin(){
      const unowned=skins.filter(s=>!ownedSkins.includes(s.id)&&s.id!=='base');
      if(unowned.length>0){
        const random=unowned[Math.floor(Math.random()*unowned.length)];
        ownedSkins.push(random.id);
        alert(`VocÃª desbloqueou uma nova skin: ${random.name}!`);
        renderInventory(); saveGame();
      }
    }

    function startGame(){
      loadGame(); updateUI(); renderUpgrades(); renderInventory(); drawEquippedSkin();
      setInterval(()=>{ player_money+=passive_income_per_second; updateUI(); },1000);
      setInterval(grantRandomSkin,200
